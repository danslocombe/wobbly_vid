Structure:

I need a hook or sub thing

Intro
    Gameplay
    Book
    Wikipedia

End Goal
    Breakdown of game
        [Normal perlin noise]
        [How we adapt]

Rendering planets
    Way to sample a radius
    How do we determine radius at angle?

Simplify problem of heightmap on flat line
Standard noise techniques

Sample points, linearly interpolate
    Cosine interpolation makes rounder - talk more later

Octaves, blending octaves

Trick One
 (Wrapping around circle)

    Single octave animation
    Wrapping animation

Trick Two
  (making things move)

    Surface to move smoothly
    Oscilator

    Every point move smoothly
    Maths fact


    Oscillators instead of samples before

    Merging octaves

    Wrapping

    Interact with player


Discussion on interpolation / different osc patterns



---------------------------------

Hook

Minecraft can remember levels 15 years ago
-> Interaction of environment

Favourite games are based on physical simulations
Braid
Core intersesting things structure game / engine around

--

"Juice"
Juice in gamedev is used to describe immediate feedback thats given to a player as they perform actions
#It can be used to suck players into a game and help them feel involved.
It can be used to suck players into a game and immerse them in the experience

# The idea that your game should be overflowing in juice was first pushed by Dutch philosophers Vlambeer
# According to Dutch Philosophers Vlambeer "your game should be overflowing in Juice"
    #[JW - 2010s probably]

#The term was popularised by Dutch Philosophers Vlambeer with their maximalist works in the 2010s  
The term was popularised by Dutch Philosophers Vlambeer in the 2010s  

# Size heft and tactile feel of game pieces in a board game

Feddback can be visual, audio or haptic
Usually feedback is scaled to how important the input / action was
But we can tune this curve
In a high juice game even small inputs should large amounts of feedback to the player

Maximising outputs for your inputs
Screenshake, haptic feedback large over the top animations
Rewarding players for input, encouraging them to interact

Truly unique to the artform
Brushstrokes for paintings, camera angles for films, or pay to win in mobile games - oh I'm making a mobile game

Ways to design the world with as much feedback as possible
World interacting with the player stomping through
Walking in a straight line should have feedback

https://www.desmos.com/calculator/tctey7234o


--------------------


I'm going to talk a bit about these planets from my game Crunda 
They were the first thing I made in development
Dictated where the rest of the game went

[cut between game sequences]

                    [game objects and the player]
They wobble and interact with the player, and kind of make the whole experience come alive


They are modelled physically with a fairly standard set of techniques but with a couple of small changes.
[cut to maths later]

And if there's anything you can take away from this video, taking standard techniques adding your
own twist is a really good place to find design ideas.
[cut to maths later]


----------------------

We are going to be talking about perlin noise and octaves of noise which are used for generating
[images of landscapes]
natural looking landscapes

[film textbook]
It's something you could lookup in a textbook 
Shoutout to Adam Miller
Look at this beautiful noise
and a free cd



Or wikipedia
[show page]

Wait why is this page so bad
This doesn't explain anything
Why would you write this if the original version had major differences [citation needed]
What were the major differences [citation needed]

Oh noooooo
(scroll to my edit)
(fades to audio noise)


----------------------

0) End Goal

So I've broken the game down to its simplest building blocks in this mockup
We have a planet, we have a couple of prop objects attached to it and we have the player 
I can move around with the arrow keys, I can jump and land back on the planet
Notice that the there is a kind of impact on the planet when I slam against it
Also the props are stuck to the surface and sway about with the underlying movement
I can also release these boulders that slam into the surface which do largely the same thing

1) Rendering Planets

We are going to draw our planets in a series of lines going around in a circle
We neeed to be able to sample the radius at a given angle
This will also be useful for if we want to tell if a collision has happened
    [@TODO Do we need a slide showing a collision test?]

The radius will come in two parts, some static part coming from how big we want the planet to be
and a varying part coming from the landscape of the surface.
We're going to mostly be talking about how we generate the varying part, for this example the varying part
is always zero giving us a circle from the constant part.

2) Flat Line

# Thinking about a simpler problem, how do we want to form the height on a flat line
We can start on a simpler problem - how do we form a flat line into an interesting heightmap?
We first sample random points at intervals along a line and join them up with straight lines

Thinking about a simpler problem - how do we want to form the height on a flat line?
    TO RECORD [This is where perlin comes in ]
Sample random points at intervals along a line and some how join them up so draw straight lines
For now we are using straight lines or linear interpolation but we can talk some more about that later

On its own we get this kind of janky shape


3) Octaves
--
cut to octaves in picosynth
or this https://www.adultswim.com/etcetera/choir/
--

So what is typically done, is generating multiple "Octaves"
They are called octaves because with every higher octave you are doubling the frequency like notes in a musical octave

With every higher octave doubling the frequency halving the amplitude
Idea is to combine them, global shapes from lower octaves
Level of detail from higher octaves
Mirror life you zoom in and theres more detail but at smaller scales
Why sometimes called "Fractal" noise

we can combine them by laying them over each other and summing over them
again linearly interpolating points.

So this looks a lot better, more natural

---
cut to perlin forehead
---

# We take our layered samples and wrap them around the edge of a circle
# We can iron out the ugly branch cut here later

4) Trick One: Making things round



5) Trick Two: Making things move

We want the surface to move under the player
Here we have a simple oscillator moving forward with time drawing out a sine wave

We want to take a bunch of these sin waves and combine them together for our planet surface
I won't bore you but a cool maths fact is that if we stack mutltiple sine waves with the same
[Maths fact]
frequency but different offests you produce anotherr sine wave

Not obvious

[Maths fact this isn't a proof]
Some kind of an intuition from this view laying them tip to toe
All rotating around together

View from before but mapped the innermost to arrow keys
As I change this innermost oscilator the overall structure changes but we still get another sine wave
Use this fact to blend between sine waves.



I can jump like this and what we want is for our landing to impact the ground
In the game we call this "slamming". So if I land here we want to shift the terrain downwards with my impact 
So we want to shunt the oscillator backwards or forwards in time

---

#Going back to something similar to the random offsets before
Going back to something similar to the noise we generated before
Instead of sampling a random number we are going to sample a random angle (or offset)

So we can run the oscillator with the angle and its going to give us a height and we are going to interpolate those heights
With time paused we have the same thing

As I start moving time forward you can see that the interpolation between points gives us this nice
moving structure.
#I've drawn these as circles but you can think of these as individual points

-- 
choo choo
steam train
--



In this view I've put multiple octaves together 
So we can see that by combining the two approaches we get this nice moving landscape
At each individual x coordinate on the line, because of what we were looking at before, are acting
individually as a sine wave


---
cut to octaves in picosynth
---


Oiler / Euler joke

Alright so I know what you're thinking
Tappity tapping on your Dvorak Keyboard into the comment box

But Dan! I hear you say
The gentle Dvorak tapping a sweet serenade through the comment box


---------------

# Lines to record


# Lines to fix

    Like brushstrokes in paintuings, or camera angles for film or pay to win in mobile games

    Like brushstrokes in oil painting or cinematography in film or family connections in  ____

    Like brushstrokes in oil painting or cinematography in film or Casual racism in game lobbys
        feedback requires interactivity
        

    How to design a world that gives as much feedback as possible
    A world where walking in a straight line gives feedback




# To Record

Talk about octaves or lack of and interpolation
Talk about placing props


# Clips to find

Brushstroke image
Witness visual tricks

---------------------------------------------

# Bridge

In 2021 I was partipating in Ludum Dare 49, a 48 hour game development competition
with the theme "Unstable". 

I had previously seen the game wibbly wobbly by the amazing Daniel Linsenn
It exists on an undulating landscape, constantly in motion. That gives it this uneasy organic atmosphere.

Ripping this off-

Inspired by this, I wanted to take the idea further where actions by the player could impact the landscape
(Fundamentally similar to something like minecraft?)


--------------------------

# Interpolation

The planets in the game don't follow the octave model we've been talking about
Instead they use a slightly different approach for interpolation

There is no good reason for this I don't think it is any better, it is just a bit simpler and happens to be the first approach in the game jam
Instead of interpolating between results we take into consideration all of the oscillators
Given an angle we assign each oscillators a "weight" based on how far away they from the angle.
We then use these weights to sum each of the oscillators.

[Do a visualisation]

This does mean that you get some weird artifacts if you don't use enough oscillators.
You also need to setup the oscillators initially so that the result "looks nice"

The advantage of this approach is for slamming
When an object collides with a planet we can take this weighting and use it to  


-------------------------

Revised Structure:

Intro:
    Juice in Gamedev
    Draws players in,
    Truly unique to games as art form

Bridge:
    LD49 - Unstable
    Wibbly wobbly
    Take one step further
    Make it come alive

Crunda
    Gameplay
    Video of Entry, did quite well

Premise:
    Talk about maths behind development
    Taking standard approach adding a twist 
    Book
    Wikipedia

End Goal
    Breakdown of game
        [Normal perlin noise]
        [How we adapt]

Rendering planets
    Way to sample a radius
    How do we determine radius at angle?

Simplify problem of heightmap on flat line
Standard noise techniques

Sample points, linearly interpolate
    Cosine interpolation makes rounder - talk more later

Octaves, blending octaves

Trick One
 (Wrapping around circle)

    Single octave animation
    Wrapping animation

Trick Two
  (making things move)

    Surface to move smoothly
    Oscilator

    Every point move smoothly
    Maths fact


    Oscillators instead of samples before

    Merging octaves

    Wrapping

    Interact with player


Discussion on interpolation / different osc patterns

----------------------------
